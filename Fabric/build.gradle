plugins {
    id 'java'
    alias libs.plugins.fabric.loom
}

apply from: '../gradle/property_helper.gradle'
apply from: '../gradle/patreon.gradle'

archivesBaseName =  "${mod_name}-Quilt"

dependencies {
    minecraft libs.minecraft

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    mappings loom.layered {
        mappings "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2"
        officialMojangMappings()
    }
    modImplementation libs.fabric.loader
    modImplementation libs.fabric.api

    modImplementation libs.bookshelf

    implementation project(":Common")
}

loom {

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

// Add the generated resources to the main source set
sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", mod_version

    filesMatching("fabric.mod.json") {
        expand "version": mod_version
    }

    def buildProps = project.properties.clone()

    if (project.hasProperty('patreon')) {

        def supporters = new ArrayList<String>()

        for (entry in project.ext.patreon.pledges) {

            def pledge = entry.value;

            if (pledge.isValid()) {

                supporters.add(pledge.getDisplayName())
            }
        }

        buildProps.put('mod_supporters', supporters.join(/","/))
    }

    filesMatching(['fabric.mod.json', 'pack.mcmeta']) {

        expand buildProps
    }

    if (project.ext.mixin_enabled) {

        filesMatching('*.mixins.json') {

            expand buildProps
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.source(project(":Common").sourceSets.main.allSource)
}

sourcesJar {
    from project(":Common").sourceSets.main.allSource
}

javadoc {
    source(project(":Common").sourceSets.main.allJava)
}
